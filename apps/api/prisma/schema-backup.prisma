// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String? // Optional for OAuth users
  name      String?
  avatar    String? // Profile picture URL
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Email verification
  emailVerified      Boolean   @default(false)
  emailVerifyToken   String?   @unique
  emailVerifyExpires DateTime?

  // Password reset
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  // Two-Factor Authentication (2FA)
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String? // TOTP secret
  backupCodes      String[] // Emergency backup codes

  // OAuth providers
  oauthAccounts OAuthAccount[]

  // Stripe customer ID
  stripeCustomerId String?

  // Relations
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  subscriptions Subscription[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String?
  zipCode   String
  country   String   @default("FR")
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  description  String?
  shortDesc    String?
  price        Decimal       @db.Decimal(10, 2)
  comparePrice Decimal?      @db.Decimal(10, 2)
  sku          String?       @unique
  barcode      String?
  weight       Decimal?      @db.Decimal(8, 2)
  status       ProductStatus @default(DRAFT)
  isDigital    Boolean       @default(false)
  isFeatured   Boolean       @default(false)
  tags         String[]
  images       String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  categoryId String?
  category   Category?        @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String // e.g., "Size S - Black"
  sku       String?  @unique
  price     Decimal? @db.Decimal(10, 2) // Override product price if different
  inventory Int      @default(0)
  isActive  Boolean  @default(true)
  options   Json // { "size": "S", "color": "Black" }
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(PENDING)

  // Pricing
  subtotal       Decimal @db.Decimal(10, 2)
  shippingCost   Decimal @default(0) @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)

  // Addresses
  shippingAddressId String?
  billingAddressId  String?

  // Stripe
  stripePaymentIntentId String?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shippedAt   DateTime?
  deliveredAt DateTime?

  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of order
  total     Decimal @db.Decimal(10, 2)

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int // 1-5 stars
  title      String?
  comment    String?
  isVerified Boolean  @default(false) // Verified purchase
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  stripeCustomerId   String
  stripePriceId      String
  status             SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model OAuthAccount {
  id           String        @id @default(cuid())
  userId       String
  provider     OAuthProvider
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

enum OAuthProvider {
  GOOGLE
  GITHUB
  FACEBOOK
  DISCORD
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}
