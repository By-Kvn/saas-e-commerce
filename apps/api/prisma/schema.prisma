// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String? // Optional for OAuth users
  name      String?
  avatar    String? // Profile picture URL
  role      String   @default("CUSTOMER") // CUSTOMER, ADMIN, MODERATOR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Email verification
  emailVerified      Boolean   @default(false)
  emailVerifyToken   String?   @unique
  emailVerifyExpires DateTime?

  // Password reset
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  // Two-Factor Authentication (2FA)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String? // TOTP secret
  backupCodes      String  @default("") // JSON string of backup codes

  // Stripe customer ID
  stripeCustomerId String?
  subscriptionStatus String @default("none") // none, active, cancelled, past_due
  subscriptionId String?

  // Relations
  oauthAccounts OAuthAccount[]
  subscriptions Subscription[]
  payments      Payment[]

  @@map("users")
}

model OAuthAccount {
  id           String  @id @default(cuid())
  userId       String
  provider     String  // GOOGLE, GITHUB, etc.
  providerAccountId String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("oauth_accounts")
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  stripeSubscriptionId String   @unique
  stripePriceId        String
  stripeCustomerId     String
  status               String   // ACTIVE, CANCELED, PAST_DUE, etc.
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  canceledAt           DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id               String   @id @default(cuid())
  userId           String
  stripePaymentId  String   @unique
  amount           Float
  currency         String
  status           String   // succeeded, failed, pending
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}
