// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Optional for OAuth users
  name      String?
  avatar    String?  // Profile picture URL
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Email verification
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?   @unique
  emailVerifyExpires DateTime?

  // Password reset
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  // Two-Factor Authentication (2FA)
  twoFactorEnabled    Boolean @default(false)
  twoFactorSecret     String? // TOTP secret
  backupCodes         String[] // Emergency backup codes

  // OAuth providers
  oauthProviders OAuthProvider[]

  // Stripe customer ID
  stripeCustomerId String?

  // Subscriptions
  subscriptions Subscription[]

  @@map("users")
}

model OAuthProvider {
  id           String @id @default(cuid())
  provider     String // "google", "github", etc.
  providerId   String // Provider's user ID
  email        String?
  name         String?
  avatar       String?
  accessToken  String?
  refreshToken String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oauth_providers")
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}

model Subscription {
  id               String            @id @default(cuid())
  userId           String
  stripeCustomerId String
  stripePriceId    String
  status           SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}
